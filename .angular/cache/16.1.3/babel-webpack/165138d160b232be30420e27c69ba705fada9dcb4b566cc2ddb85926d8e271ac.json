{"ast":null,"code":"import _asyncToGenerator from \"/Users/dchen/code/marketing-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DecimalPipe } from '@angular/common';\nimport { newLayoutResponse, backendDataResponse } from './dashboard-mock-response';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction DashboardComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"h1\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 2);\n    i0.ɵɵelement(4, \"img\", 3);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_div_1_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_1_div_6_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const i_r8 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.selectedTabEvent(i_r8));\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const sectionLabel_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"active\", ctx_r2.selectedTab === i_r8);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(sectionLabel_r7);\n  }\n}\nfunction DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"number\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r14 = i0.ɵɵnextContext().$implicit;\n    const ctx_r15 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" $\", i0.ɵɵpipeBind2(2, 1, ctx_r15.backendDataResponse.dataPoints[element_r14.name], ctx_r15.fieldDefinitions[element_r14.name] == null ? null : ctx_r15.fieldDefinitions[element_r14.name].digitsInfo), \" \");\n  }\n}\nfunction DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"number\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r14 = i0.ɵɵnextContext().$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 1, ctx_r16.backendDataResponse.dataPoints[element_r14.name], ctx_r16.fieldDefinitions[element_r14.name] == null ? null : ctx_r16.fieldDefinitions[element_r14.name].digitsInfo), \"% \");\n  }\n}\nfunction DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"number\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r14 = i0.ɵɵnextContext().$implicit;\n    const ctx_r17 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, ctx_r17.backendDataResponse.dataPoints[element_r14.name]), \" \");\n  }\n}\nfunction DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 16)(2, \"span\", 17);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 18);\n    i0.ɵɵtemplate(5, DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_span_5_Template, 3, 4, \"span\", 19);\n    i0.ɵɵtemplate(6, DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_span_6_Template, 3, 4, \"span\", 19);\n    i0.ɵɵtemplate(7, DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_span_7_Template, 3, 3, \"span\", 20);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const element_r14 = ctx.$implicit;\n    const ctx_r13 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r13.fieldDefinitions[element_r14.name] == null ? null : ctx_r13.fieldDefinitions[element_r14.name].label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitch\", ctx_r13.fieldDefinitions[element_r14.name] == null ? null : ctx_r13.fieldDefinitions[element_r14.name].format);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"currency\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"percent\");\n  }\n}\nfunction DashboardComponent_div_1_ng_container_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_Template, 8, 4, \"ng-container\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const metric_r11 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", metric_r11.elements);\n  }\n}\nfunction DashboardComponent_div_1_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, DashboardComponent_div_1_ng_container_8_ng_container_1_Template, 2, 1, \"ng-container\", 15);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const metric_r11 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", metric_r11.label === ctx_r3.sectionLabels[ctx_r3.selectedTab]);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"string\": a0\n  };\n};\nfunction DashboardComponent_div_1_th_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r22 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, (ctx_r4.fieldDefinitions[field_r22 == null ? null : field_r22.name] == null ? null : ctx_r4.fieldDefinitions[field_r22 == null ? null : field_r22.name].type) === \"string\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", (ctx_r4.fieldDefinitions[field_r22 == null ? null : field_r22.name] == null ? null : ctx_r4.fieldDefinitions[field_r22 == null ? null : field_r22.name].label) || (field_r22 == null ? null : field_r22.name), \" \");\n  }\n}\nfunction DashboardComponent_div_1_ng_container_18_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r26 = ctx.$implicit;\n    const dataItem_r23 = i0.ɵɵnextContext().$implicit;\n    const ctx_r25 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, (ctx_r25.fieldDefinitions[field_r26 == null ? null : field_r26.name] == null ? null : ctx_r25.fieldDefinitions[field_r26 == null ? null : field_r26.name].type) === \"string\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r25.formatDataTypeValueItem(field_r26 == null ? null : field_r26.name, dataItem_r23[field_r26 == null ? null : field_r26.name]), \" \");\n  }\n}\nfunction DashboardComponent_div_1_ng_container_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"tr\", 21);\n    i0.ɵɵtemplate(2, DashboardComponent_div_1_ng_container_18_td_2_Template, 2, 4, \"td\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r24 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i_r24 % 2 === 0 ? \"even\" : \"odd\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.layoutResponse == null ? null : ctx_r5.layoutResponse.layout[3] == null ? null : ctx_r5.layoutResponse.layout[3].elements[0] == null ? null : ctx_r5.layoutResponse.layout[3].elements[0].fields);\n  }\n}\nfunction DashboardComponent_div_1_td_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\")(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const field_r28 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.calculateAggregate(field_r28 == null ? null : field_r28.name));\n  }\n}\nfunction DashboardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"h1\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 4)(4, \"div\", 5)(5, \"div\", 6);\n    i0.ɵɵtemplate(6, DashboardComponent_div_1_div_6_Template, 3, 3, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 8);\n    i0.ɵɵtemplate(8, DashboardComponent_div_1_ng_container_8_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"div\", 10)(10, \"div\", 11)(11, \"h2\");\n    i0.ɵɵtext(12, \"Summary\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"table\")(14, \"thead\")(15, \"tr\");\n    i0.ɵɵtemplate(16, DashboardComponent_div_1_th_16_Template, 2, 4, \"th\", 12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"tbody\");\n    i0.ɵɵtemplate(18, DashboardComponent_div_1_ng_container_18_Template, 3, 2, \"ng-container\", 9);\n    i0.ɵɵelementStart(19, \"tr\")(20, \"td\", 13)(21, \"strong\");\n    i0.ɵɵtext(22, \"TOTAL\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(23, DashboardComponent_div_1_td_23_Template, 3, 1, \"td\", 9);\n    i0.ɵɵelementEnd()()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.layoutResponse.displayName);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.sectionLabels);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.layoutResponse.layout);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.layoutResponse == null ? null : ctx_r1.layoutResponse.layout[3] == null ? null : ctx_r1.layoutResponse.layout[3].elements[0] == null ? null : ctx_r1.layoutResponse.layout[3].elements[0].fields);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.backendDataResponse == null ? null : ctx_r1.backendDataResponse.dataSets[0] == null ? null : ctx_r1.backendDataResponse.dataSets[0].data);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.layoutResponse == null ? null : ctx_r1.layoutResponse.layout[3] == null ? null : ctx_r1.layoutResponse.layout[3].elements[0] == null ? null : ctx_r1.layoutResponse.layout[3].elements[0].fields.slice(1));\n  }\n}\nexport class DashboardComponent {\n  constructor(decimalPipe) {\n    this.decimalPipe = decimalPipe;\n    // Decide which sections to show from the data source\n    this.sectionLabels = ['Overall Metrics', 'Observed Metrics', 'Source Metrics'];\n    this.selectedTab = 0;\n    this.isLoading = true;\n  }\n  // Ignore this function, it is only used to simulate fetching data from an API endpoint\n  fetchData(url) {\n    // Simulate fetching data from an API endpoint\n    // For the purpose of this exercise, to mimic the real world scenario, we are using a timeout\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // URL would be a real API endpoint url\n        let response = {};\n        if (url === 'layout') {\n          response = newLayoutResponse;\n        } else if (url === 'dataset') {\n          response = backendDataResponse;\n        }\n        resolve(response);\n      }, 500); // Simulate a 1-second delay\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Fetch data from the mocked API endpoints\n      try {\n        yield Promise.all([_this.fetchData('layout'), _this.fetchData('dataset')]).then(([layoutResponse, backendDataResponse]) => {\n          _this.layoutResponse = layoutResponse;\n          _this.backendDataResponse = backendDataResponse;\n          _this.fieldDefinitions = layoutResponse?.fieldDefinitions;\n          _this.isLoading = false;\n          // TODO: Remove Eventually - Testing the data source on page load.\n          if (_this.backendDataResponse?.dataSets && _this.backendDataResponse.dataSets.length > 0) {\n            console.log('Data Sets:', _this.backendDataResponse.dataSets);\n            console.log('Column Elements:', _this.layoutResponse.layout[3]?.elements[0]);\n          }\n        });\n      } catch (error) {\n        console.error(\"An error occurred while fetching data :: fetchData :: \", error);\n        throw error;\n      }\n    })();\n  }\n  // =========\n  // FUNCTIONS\n  // =========\n  selectedTabEvent(index) {\n    this.selectedTab = index;\n  }\n  // ====================================================================================================\n  // PURPOSE: Format the data item value based on the field definition\n  // INPUTS: label: string, value: any; Example: { label: \"totalSpend\", value : 7625.071235364659 }\n  // OUTPUTS: Formatted String based on TYPE; Example: \"$7,625\"\n  // ====================================================================================================\n  formatDataTypeValueItem(label, value) {\n    // TODO: Remove - console.log(\"formatDataTypeValueItem :: \", { label, value });\n    // Cross reference the label with the field definitions to get the data formats\n    const fieldDefinition = this.fieldDefinitions[label];\n    if (!fieldDefinition) {\n      return 'Unknown field';\n    }\n    //    *** FieldDefinitions ***\n    //    label: string;\n    //    format: 'datetime' | 'currency' | 'percent' | 'number' | 'none';\n    //    type: 'string' | 'double' | 'datetime';\n    //    digitsInfo?: string;\n    //    aggFn: 'none' | 'sum' | 'average';\n    const {\n      format,\n      type,\n      digitsInfo\n    } = fieldDefinition;\n    if (format === 'none' && type === 'string') {\n      return value;\n    } else {\n      if (format) {\n        switch (format) {\n          case 'number':\n            return this.decimalPipe.transform(value, digitsInfo || '') || '';\n          case 'percent':\n            return this.decimalPipe.transform(value, digitsInfo || '') + '%';\n          case 'currency':\n            const formattedValue = this.decimalPipe.transform(value, digitsInfo) || '';\n            return `$${formattedValue}`;\n          case 'datetime':\n            // NO Datetimes exist in the datasource, but if they did we can use a data pipe to format the date\n            return value;\n          default:\n            // Handle an unknown data type\n            return value.toString();\n        }\n      }\n      // console.log(\"DATA TYPE: \", { format, value });\n      return \"Unknown data type\";\n    }\n  }\n  // ====================================================================================================\n  // PURPOSE: Calculates (Sums or Averages) the data item value based on the field definition\n  // INPUTS: fieldName: string; Example: \"totalSpend\"\n  // OUTPUTS: Formatted String based on TYPE; Example: \"$7,625\"\n  // ====================================================================================================\n  calculateAggregate(fieldName) {\n    let aggregateValue = 0;\n    let count = 0;\n    const fieldDefinition = this.fieldDefinitions[fieldName];\n    if (!fieldDefinition || !fieldDefinition.aggFn) {\n      return 'Unknown field';\n    }\n    //    *** FieldDefinitions ***\n    //    label: string;\n    //    format: 'datetime' | 'currency' | 'percent' | 'number' | 'none';\n    //    type: 'string' | 'double' | 'datetime';\n    //    digitsInfo?: string;\n    //    aggFn: 'none' | 'sum' | 'average';\n    const {\n      format,\n      aggFn,\n      digitsInfo\n    } = fieldDefinition;\n    // Add up all the values for the field first\n    for (const dataItem of this.backendDataResponse?.dataSets[0]?.data) {\n      const value = dataItem[fieldName];\n      if (typeof value === 'number') {\n        aggregateValue += value;\n        count++;\n      }\n    }\n    // Check the field definition to see if we need to sum or average the values\n    if (aggFn === 'sum') {\n      const formattedValue = this.decimalPipe.transform(aggregateValue, digitsInfo) || '';\n      if (format === 'currency') {\n        return `$${formattedValue}`;\n      }\n      return formattedValue;\n    } else if (aggFn === 'average') {\n      if (count === 0) {\n        return 'N/A';\n      } else {\n        const average = aggregateValue / count;\n        return this.decimalPipe.transform(average, digitsInfo || '') + '%';\n      }\n    }\n    // Leave as blank string for empty cell.\n    return '';\n  }\n}\nDashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n  return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.DecimalPipe));\n};\nDashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DashboardComponent,\n  selectors: [[\"app-dashboard\"]],\n  features: [i0.ɵɵProvidersFeature([DecimalPipe])],\n  decls: 2,\n  vars: 2,\n  consts: [[\"class\", \"dashboard\", 4, \"ngIf\"], [1, \"dashboard\"], [1, \"loading-icon\"], [\"src\", \"assets/loader-simple.gif\", \"alt\", \"Loading...\"], [1, \"metrics-data-container\"], [1, \"metrics-overview\"], [1, \"metrics-tabs-container\"], [\"class\", \"metrics-tabs\", 3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"metrics-row\"], [4, \"ngFor\", \"ngForOf\"], [1, \"summary-table\"], [1, \"metrics-header\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"string\"], [1, \"metrics-tabs\", 3, \"click\"], [4, \"ngIf\"], [1, \"metric\"], [1, \"label\"], [1, \"value\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"], [3, \"ngClass\"]],\n  template: function DashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, DashboardComponent_div_0_Template, 5, 0, \"div\", 0);\n      i0.ɵɵtemplate(1, DashboardComponent_div_1_Template, 24, 6, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, i1.DecimalPipe],\n  styles: [\"\\n\\n@keyframes _ngcontent-%COMP%_gradientBG {\\n\\t0% {\\n\\t\\tbackground-position: 0% 50%;\\n\\t}\\n\\t50% {\\n\\t\\tbackground-position: 100% 50%;\\n\\t}\\n\\t100% {\\n\\t\\tbackground-position: 0% 50%;\\n\\t}\\n}\\nh1[_ngcontent-%COMP%] {\\n    background-color: #000;\\n    font-size: 1.25rem;\\n    color: orange;\\n    padding: 10px 30px;\\n    position: fixed;\\n    width: 100%;\\n    top: 0;\\n}\\n\\n.metrics-data-container[_ngcontent-%COMP%] {\\n    width: 90%;\\n    margin: 80px auto;\\n    padding: 30px;\\n}\\n\\n.metrics-overview[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-wrap: wrap;\\n    justify-content: space-between;\\n    margin-bottom: 20px;\\n}\\n.metrics-tabs-container[_ngcontent-%COMP%] { \\n    display: flex;\\n    justify-content: flex-start;\\n    align-items: center; \\n}\\n.metrics-tabs[_ngcontent-%COMP%] {\\n    align-items: center;\\n    border-bottom: 4px solid #d5d5d5;\\n    margin-right: 30px;\\n    margin-bottom: 15px;\\n    padding-bottom: 10px;\\n}\\n  \\n.metrics-tabs[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n    text-transform: uppercase;\\n    font-weight: normal;\\n    font-size: 1rem;\\n    margin: 0;\\n    padding: 0;\\n    color: #666;\\n    cursor: pointer;\\n}\\n\\n.metrics-tabs.active[_ngcontent-%COMP%] {\\n    border-bottom: 4px solid #000;\\n}\\n  \\n.metrics-tabs.active[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n    font-weight: bold;\\n    color: #000;\\n}  \\n\\n.metrics-row[_ngcontent-%COMP%] {\\n    display: flex;\\n    width: 100%;\\n    flex-wrap: wrap;\\n    margin-bottom: 30px;\\n}\\n\\n.metric[_ngcontent-%COMP%] {\\n    \\n\\n    background: linear-gradient(-45deg, #fff, #f2f2f2, #eaeaea, #fff);\\n    background-size: 500% 500%;\\n    animation: _ngcontent-%COMP%_gradientBG 5s ease infinite;\\n    border-radius: 5px;\\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\\n    margin: 10px;\\n    padding: 20px;\\n    flex-basis: calc(20% - 60px);\\n}\\n\\n\\n.metric[_ngcontent-%COMP%]   .label[_ngcontent-%COMP%] {\\n    color: black;\\n    font-weight: bold;\\n    display: block;\\n    font-size: .8rem;\\n    margin-bottom: 12px;\\n}\\n\\n.metric[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%] {\\n    color: #4ba33a;\\n    font-size: 28px;\\n    font-weight: bold;\\n    text-rendering: optimizeLegibility;\\n}\\n\\n\\n\\n.summary-table[_ngcontent-%COMP%] {\\n    background-color: #f5f5f5;\\n    width: 100%;\\n    border: 1px solid #e2e2e2;\\n    border-radius: 5px;\\n    padding: 20px;\\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.summary-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%] {\\n    width: 100%;\\n    border-collapse: separate;\\n    border-spacing: 0;\\n}\\n\\n.summary-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n    color: #000;\\n    text-align: right;\\n    text-transform: uppercase;\\n    padding: 3px;\\n    font-weight: 600;\\n    font-size: .65rem;\\n    border-bottom: 3px solid #d1d1d1;\\n}\\n\\n.summary-table[_ngcontent-%COMP%]   th.string[_ngcontent-%COMP%] {\\n    text-align: left;\\n}\\n\\n.summary-table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\\n    padding: 12px 8px;\\n    border-bottom: 1px solid #e2e2e2;\\n    text-align: right;\\n    color: #444;\\n    font-size: .75rem;\\n}\\n\\n.summary-table[_ngcontent-%COMP%]   td.string[_ngcontent-%COMP%] {\\n    text-align: left;\\n}\\n\\n.summary-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\\n    border-bottom: 1px solid #999;\\n}\\n.summary-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr.even[_ngcontent-%COMP%] {\\n    background-color: #fff;\\n}\\n\\n.summary-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:last-child {\\n    background-color: #fff;\\n}\\n\\n.summary-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:last-child   td[_ngcontent-%COMP%] {\\n    border-bottom: 0;\\n}\\n\\n.summary-table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n    color: #4ba33a;\\n}\\n\\n.loading-icon[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 100vh;\\n}\\n  \\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDRCQUE0QjtBQUM1QjtDQUNDO0VBQ0MsMkJBQTJCO0NBQzVCO0NBQ0E7RUFDQyw2QkFBNkI7Q0FDOUI7Q0FDQTtFQUNDLDJCQUEyQjtDQUM1QjtBQUNEO0FBQ0E7SUFDSSxzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLFdBQVc7SUFDWCxNQUFNO0FBQ1Y7O0FBRUE7SUFDSSxVQUFVO0lBQ1YsaUJBQWlCO0lBQ2pCLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsZUFBZTtJQUNmLDhCQUE4QjtJQUM5QixtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLGFBQWE7SUFDYiwyQkFBMkI7SUFDM0IsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsZ0NBQWdDO0lBQ2hDLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLDZCQUE2QjtBQUNqQzs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsV0FBVztJQUNYLGVBQWU7SUFDZixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSw0QkFBNEI7SUFDNUIsaUVBQWlFO0lBQ2pFLDBCQUEwQjtJQUMxQixzQ0FBc0M7SUFDdEMsa0JBQWtCO0lBQ2xCLDBDQUEwQztJQUMxQyxZQUFZO0lBQ1osYUFBYTtJQUNiLDRCQUE0QjtBQUNoQzs7O0FBR0E7SUFDSSxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCxnQkFBZ0I7SUFDaEIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksY0FBYztJQUNkLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsa0NBQWtDO0FBQ3RDOztBQUVBLGtCQUFrQjtBQUNsQjtJQUNJLHlCQUF5QjtJQUN6QixXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsMENBQTBDO0FBQzlDOztBQUVBO0lBQ0ksV0FBVztJQUNYLHlCQUF5QjtJQUN6QixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsaUJBQWlCO0lBQ2pCLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixnQ0FBZ0M7QUFDcEM7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsZ0NBQWdDO0lBQ2hDLGlCQUFpQjtJQUNqQixXQUFXO0lBQ1gsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksNkJBQTZCO0FBQ2pDO0FBQ0E7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsYUFBYTtBQUNqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGRhc2hib2FyZC5jb21wb25lbnQuY3NzICovXG5Aa2V5ZnJhbWVzIGdyYWRpZW50Qkcge1xuXHQwJSB7XG5cdFx0YmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlO1xuXHR9XG5cdDUwJSB7XG5cdFx0YmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7XG5cdH1cblx0MTAwJSB7XG5cdFx0YmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlO1xuXHR9XG59XG5oMSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICBmb250LXNpemU6IDEuMjVyZW07XG4gICAgY29sb3I6IG9yYW5nZTtcbiAgICBwYWRkaW5nOiAxMHB4IDMwcHg7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRvcDogMDtcbn1cblxuLm1ldHJpY3MtZGF0YS1jb250YWluZXIge1xuICAgIHdpZHRoOiA5MCU7XG4gICAgbWFyZ2luOiA4MHB4IGF1dG87XG4gICAgcGFkZGluZzogMzBweDtcbn1cblxuLm1ldHJpY3Mtb3ZlcnZpZXcge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xufVxuLm1ldHJpY3MtdGFicy1jb250YWluZXIgeyBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyOyBcbn1cbi5tZXRyaWNzLXRhYnMge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYm9yZGVyLWJvdHRvbTogNHB4IHNvbGlkICNkNWQ1ZDU7XG4gICAgbWFyZ2luLXJpZ2h0OiAzMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XG59XG4gIFxuLm1ldHJpY3MtdGFicyBzcGFuIHtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgZm9udC1zaXplOiAxcmVtO1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGNvbG9yOiAjNjY2O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLm1ldHJpY3MtdGFicy5hY3RpdmUge1xuICAgIGJvcmRlci1ib3R0b206IDRweCBzb2xpZCAjMDAwO1xufVxuICBcbi5tZXRyaWNzLXRhYnMuYWN0aXZlIHNwYW4ge1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGNvbG9yOiAjMDAwO1xufSAgXG5cbi5tZXRyaWNzLXJvdyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbn1cblxuLm1ldHJpYyB7XG4gICAgLyogYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgKi9cbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoLTQ1ZGVnLCAjZmZmLCAjZjJmMmYyLCAjZWFlYWVhLCAjZmZmKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDUwMCUgNTAwJTtcbiAgICBhbmltYXRpb246IGdyYWRpZW50QkcgNXMgZWFzZSBpbmZpbml0ZTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgIG1hcmdpbjogMTBweDtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIGZsZXgtYmFzaXM6IGNhbGMoMjAlIC0gNjBweCk7XG59XG5cblxuLm1ldHJpYyAubGFiZWwge1xuICAgIGNvbG9yOiBibGFjaztcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBmb250LXNpemU6IC44cmVtO1xuICAgIG1hcmdpbi1ib3R0b206IDEycHg7XG59XG5cbi5tZXRyaWMgLnZhbHVlIHtcbiAgICBjb2xvcjogIzRiYTMzYTtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcbn1cblxuLyogVGFibGUgc3R5bGluZyAqL1xuLnN1bW1hcnktdGFibGUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2UyZTJlMjtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBib3gtc2hhZG93OiAwcHggMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG59XG5cbi5zdW1tYXJ5LXRhYmxlIHRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXItY29sbGFwc2U6IHNlcGFyYXRlO1xuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG4uc3VtbWFyeS10YWJsZSB0aCB7XG4gICAgY29sb3I6ICMwMDA7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBwYWRkaW5nOiAzcHg7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBmb250LXNpemU6IC42NXJlbTtcbiAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQgI2QxZDFkMTtcbn1cblxuLnN1bW1hcnktdGFibGUgdGguc3RyaW5nIHtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xufVxuXG4uc3VtbWFyeS10YWJsZSB0ZCB7XG4gICAgcGFkZGluZzogMTJweCA4cHg7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlMmUyZTI7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgY29sb3I6ICM0NDQ7XG4gICAgZm9udC1zaXplOiAuNzVyZW07XG59XG5cbi5zdW1tYXJ5LXRhYmxlIHRkLnN0cmluZyB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbn1cblxuLnN1bW1hcnktdGFibGUgdGJvZHkgdHIge1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xufVxuLnN1bW1hcnktdGFibGUgdGJvZHkgdHIuZXZlbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbn1cblxuLnN1bW1hcnktdGFibGUgdGJvZHkgdHI6bGFzdC1jaGlsZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbn1cblxuLnN1bW1hcnktdGFibGUgdGJvZHkgdHI6bGFzdC1jaGlsZCB0ZCB7XG4gICAgYm9yZGVyLWJvdHRvbTogMDtcbn1cblxuLnN1bW1hcnktdGFibGUgdGQgc3Ryb25nIHtcbiAgICBjb2xvcjogIzRiYTMzYTtcbn1cblxuLmxvYWRpbmctaWNvbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGhlaWdodDogMTAwdmg7XG59XG4gIFxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["DecimalPipe","newLayoutResponse","backendDataResponse","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","DashboardComponent_div_1_div_6_Template_div_click_0_listener","restoredCtx","ɵɵrestoreView","_r10","i_r8","index","ctx_r9","ɵɵnextContext","ɵɵresetView","selectedTabEvent","ɵɵclassProp","ctx_r2","selectedTab","ɵɵadvance","ɵɵtextInterpolate","sectionLabel_r7","ɵɵtextInterpolate1","ɵɵpipeBind2","ctx_r15","dataPoints","element_r14","name","fieldDefinitions","digitsInfo","ctx_r16","ɵɵpipeBind1","ctx_r17","ɵɵelementContainerStart","ɵɵtemplate","DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_span_5_Template","DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_span_6_Template","DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_span_7_Template","ɵɵelementContainerEnd","ctx_r13","label","ɵɵproperty","format","DashboardComponent_div_1_ng_container_8_ng_container_1_ng_container_1_Template","metric_r11","elements","DashboardComponent_div_1_ng_container_8_ng_container_1_Template","ctx_r3","sectionLabels","ɵɵpureFunction1","_c0","ctx_r4","field_r22","type","ctx_r25","field_r26","formatDataTypeValueItem","dataItem_r23","DashboardComponent_div_1_ng_container_18_td_2_Template","i_r24","ctx_r5","layoutResponse","layout","fields","ctx_r6","calculateAggregate","field_r28","DashboardComponent_div_1_div_6_Template","DashboardComponent_div_1_ng_container_8_Template","DashboardComponent_div_1_th_16_Template","DashboardComponent_div_1_ng_container_18_Template","DashboardComponent_div_1_td_23_Template","ctx_r1","displayName","dataSets","data","slice","DashboardComponent","constructor","decimalPipe","isLoading","fetchData","url","Promise","resolve","setTimeout","response","ngOnInit","_this","_asyncToGenerator","all","then","length","console","log","error","value","fieldDefinition","transform","formattedValue","toString","fieldName","aggregateValue","count","aggFn","dataItem","average","ɵɵdirectiveInject","i1","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","DashboardComponent_div_0_Template","DashboardComponent_div_1_Template"],"sources":["/Users/dchen/code/marketing-dashboard/src/app/dashboard/dashboard.component.ts","/Users/dchen/code/marketing-dashboard/src/app/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DecimalPipe } from '@angular/common';\nimport { newLayoutResponse, backendDataResponse } from './dashboard-mock-response';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n  providers: [DecimalPipe]\n})\n\nexport class DashboardComponent implements OnInit {\n  // All types and interfaces are defined in the mock response files\n  layoutResponse: any;\n  backendDataResponse: any;\n  fieldDefinitions: any;\n  // Decide which sections to show from the data source\n  sectionLabels: string[] = ['Overall Metrics', 'Observed Metrics', 'Source Metrics'];\n  selectedTab: number = 0;\n  isLoading = true;\n\n  constructor(private decimalPipe: DecimalPipe) { }\n  // Ignore this function, it is only used to simulate fetching data from an API endpoint\n  fetchData(url: string): Promise<any> {\n    // Simulate fetching data from an API endpoint\n    // For the purpose of this exercise, to mimic the real world scenario, we are using a timeout\n    return new Promise<any>((resolve) => {\n      setTimeout(() => {\n          // URL would be a real API endpoint url\n          let response = {};\n          if (url === 'layout') {\n            response = newLayoutResponse;\n          } else if (url === 'dataset') {\n            response = backendDataResponse;\n          }\n          resolve(response);\n      }, 500); // Simulate a 1-second delay\n    });\n  }\n\n  async ngOnInit() {\n    // Fetch data from the mocked API endpoints\n    try {\n      await Promise.all([\n        this.fetchData('layout'),\n        this.fetchData('dataset'),\n      ]).then(([layoutResponse, backendDataResponse]) => {\n        this.layoutResponse = layoutResponse;\n        this.backendDataResponse = backendDataResponse;\n        this.fieldDefinitions = layoutResponse?.fieldDefinitions;\n        this.isLoading = false;\n        // TODO: Remove Eventually - Testing the data source on page load.\n        if (this.backendDataResponse?.dataSets && this.backendDataResponse.dataSets.length > 0) {\n          console.log('Data Sets:', this.backendDataResponse.dataSets);\n          console.log('Column Elements:', this.layoutResponse.layout[3]?.elements[0]);\n        }\n      });\n    } catch (error) {\n      console.error(\"An error occurred while fetching data :: fetchData :: \", error);\n      throw error;\n    }\n  }\n  // =========\n  // FUNCTIONS\n  // =========\n\n  selectedTabEvent(index: number): void {\n    this.selectedTab = index;\n  }\n  // ====================================================================================================\n  // PURPOSE: Format the data item value based on the field definition\n  // INPUTS: label: string, value: any; Example: { label: \"totalSpend\", value : 7625.071235364659 }\n  // OUTPUTS: Formatted String based on TYPE; Example: \"$7,625\"\n  // ====================================================================================================\n  formatDataTypeValueItem(label: string, value: any): string {\n    // TODO: Remove - console.log(\"formatDataTypeValueItem :: \", { label, value });\n    // Cross reference the label with the field definitions to get the data formats\n    const fieldDefinition = this.fieldDefinitions[label];\n    if (!fieldDefinition) {\n      return 'Unknown field';\n    }\n\n    //    *** FieldDefinitions ***\n    //    label: string;\n    //    format: 'datetime' | 'currency' | 'percent' | 'number' | 'none';\n    //    type: 'string' | 'double' | 'datetime';\n    //    digitsInfo?: string;\n    //    aggFn: 'none' | 'sum' | 'average';\n\n    const { format, type, digitsInfo } = fieldDefinition;\n\n    if (format === 'none' && type === 'string') {\n      return value;\n    } else {\n      if (format) {\n        switch (format) {\n          case 'number':\n            return this.decimalPipe.transform(value, digitsInfo || '') || '';\n          case 'percent':\n            return this.decimalPipe.transform(value, digitsInfo || '') + '%';\n          case 'currency':\n            const formattedValue = this.decimalPipe.transform(value, digitsInfo) || '';\n            return `$${formattedValue}`;\n          case 'datetime':\n            // NO Datetimes exist in the datasource, but if they did we can use a data pipe to format the date\n            return value;\n          default:\n            // Handle an unknown data type\n            return value.toString();\n        }\n      }\n      // console.log(\"DATA TYPE: \", { format, value });\n      return \"Unknown data type\";\n    }\n  }\n\n  // ====================================================================================================\n  // PURPOSE: Calculates (Sums or Averages) the data item value based on the field definition\n  // INPUTS: fieldName: string; Example: \"totalSpend\"\n  // OUTPUTS: Formatted String based on TYPE; Example: \"$7,625\"\n  // ====================================================================================================\n  calculateAggregate(fieldName: string): string {\n    let aggregateValue = 0;\n    let count = 0;\n    const fieldDefinition = this.fieldDefinitions[fieldName];\n    if (!fieldDefinition || !fieldDefinition.aggFn) {\n      return 'Unknown field';\n    }\n    //    *** FieldDefinitions ***\n    //    label: string;\n    //    format: 'datetime' | 'currency' | 'percent' | 'number' | 'none';\n    //    type: 'string' | 'double' | 'datetime';\n    //    digitsInfo?: string;\n    //    aggFn: 'none' | 'sum' | 'average';\n    const { format, aggFn, digitsInfo } = fieldDefinition;\n\n    // Add up all the values for the field first\n    for (const dataItem of this.backendDataResponse?.dataSets[0]?.data) {\n      const value = dataItem[fieldName];\n      if (typeof value === 'number') {\n        aggregateValue += value;\n        count++;\n      }\n    }\n    // Check the field definition to see if we need to sum or average the values\n    if (aggFn === 'sum') {\n      const formattedValue = this.decimalPipe.transform(aggregateValue, digitsInfo) || '';\n      if (format === 'currency') {\n        return `$${formattedValue}`;\n      }\n      return formattedValue;\n    } else if (aggFn === 'average') {\n      if (count === 0) {\n        return 'N/A';\n      } else {\n        const average = aggregateValue / count;\n        return this.decimalPipe.transform(average, digitsInfo || '') + '%';\n      }\n    }\n    // Leave as blank string for empty cell.\n    return '';\n  }  \n}\n","<div *ngIf=\"isLoading\" class=\"dashboard\">\n    <h1>Loading...</h1>\n    <div class=\"loading-icon\">\n        <img src=\"assets/loader-simple.gif\" alt=\"Loading...\">\n    </div>\n</div>\n<div *ngIf=\"!isLoading\" class=\"dashboard\">\n    <h1>{{ layoutResponse.displayName }}</h1>\n    <div class=\"metrics-data-container\">\n        <div class=\"metrics-overview\">\n            <!-- The Figma design doesn't scale well with more and more data so I took some creative liberties -->\n            <!-- Create tabs -->\n            <div class=\"metrics-tabs-container\">\n                <div class=\"metrics-tabs\" *ngFor=\"let sectionLabel of sectionLabels; let i = index\" (click)=\"selectedTabEvent(i)\" [class.active]=\"selectedTab === i\">\n                    <span>{{ sectionLabel }}</span>\n                </div>\n            </div>\n            <!-- Show the content of the selected tab -->\n            <div class=\"metrics-row\">\n              <ng-container *ngFor=\"let metric of layoutResponse.layout\">\n                <ng-container *ngIf=\"metric.label === sectionLabels[selectedTab]\">\n                  <ng-container *ngFor=\"let element of metric.elements\">\n                    <div class=\"metric\">\n                      <span class=\"label\">{{ fieldDefinitions[element.name]?.label }}</span>\n                      <span class=\"value\" [ngSwitch]=\"fieldDefinitions[element.name]?.format\">\n                        <span *ngSwitchCase=\"'currency'\">\n                          ${{ backendDataResponse.dataPoints[element.name] | number: fieldDefinitions[element.name]?.digitsInfo }}\n                        </span>\n                        <span *ngSwitchCase=\"'percent'\">\n                          {{ backendDataResponse.dataPoints[element.name] | number: fieldDefinitions[element.name]?.digitsInfo }}%\n                        </span>\n                        <span *ngSwitchDefault>\n                          {{ backendDataResponse.dataPoints[element.name] | number }}\n                        </span>\n                      </span>\n                    </div>\n                  </ng-container>\n                </ng-container>\n              </ng-container>\n            </div>\n        </div>\n        <div class=\"summary-table\">\n            <div class=\"metrics-header\">\n                <h2>Summary</h2>\n            </div>\n            <!-- Could use any component ui table with built-in sorting and pagination, didn't seem like building one was part of this exercise -->\n            <table>\n                <thead>\n                    <tr>\n                        <th *ngFor=\"let field of layoutResponse?.layout[3]?.elements[0]?.fields\" [ngClass]=\"{ 'string': fieldDefinitions[field?.name]?.type === 'string' }\">\n                            {{ fieldDefinitions[field?.name]?.label || field?.name }}\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <ng-container *ngFor=\"let dataItem of backendDataResponse?.dataSets[0]?.data; let i = index\">\n                        <tr [ngClass]=\"i % 2 === 0 ? 'even' : 'odd'\">\n                            <td *ngFor=\"let field of layoutResponse?.layout[3]?.elements[0]?.fields\" [ngClass]=\"{ 'string': fieldDefinitions[field?.name]?.type === 'string' }\">\n                                {{ formatDataTypeValueItem(field?.name, dataItem[field?.name]) }}\n                            </td>\n                        </tr>\n                    </ng-container>\n                    <tr>\n                        <td class=\"string\"><strong>TOTAL</strong></td>\n                        <td *ngFor=\"let field of layoutResponse?.layout[3]?.elements[0]?.fields.slice(1)\">\n                            <strong>{{ calculateAggregate(field?.name) }}</strong>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}